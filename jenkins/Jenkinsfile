pipeline {
    agent {
        label 'terraform-aws'  // Usar agente específico con herramientas instaladas
    }
    
    environment {
        JOB_NAME = "terraform-aws"
        AWS_REGION = "us-east-1"
        AWS_CREDENTIALS_ID = 'aws-cli-token'
        ANSIBLE_DIR = "../ansible"
        TF_STATE_BUCKET = "tf-state-bucket-${env.ENVIRONMENT}"
        JENKINS_TRIGGER_TOKEN = credentials('JENKINS_TRIGGER_TOKEN')
        SLACK_CHANNEL = '#infra-alerts'
        SLACK_TOKEN_CREDENTIAL_ID = 'slack-token'
        SLACK_TEAM_DOMAIN = 'aws-terraform-ansible'
    }

    parameters {
        string(name: 'GIT_SHA', defaultValue: '', description: 'Commit SHA from GitHub')
        string(name: 'GIT_REF', defaultValue: 'main', description: 'Git reference from GitHub')
        choice(name: 'ENVIRONMENT', choices: ['dev', 'prod'], description: 'Target environment')
    }

    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'GIT_SHA', value: '$.sha'],
                [key: 'GIT_REF', value: '$.ref'],
                [key: 'ENVIRONMENT', value: '$.environment']
            ],
            token: env.JENKINS_TRIGGER_TOKEN ?: 'terraform-ci',
            printContributedVariables: true,
            printPostContent: true
        )
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                cleanWs()
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: env.GIT_REF]],
                    extensions: [[$class: 'CloneOption', depth: 1, noTags: false, shallow: true]],
                    userRemoteConfigs: [[url: 'https://github.com/alexhl005/aws-terraform-ansible.git']]
                ])
                
                dir("terraform/environments/${env.ENVIRONMENT}") {
                    sh 'mkdir -p tf_outputs'
                }
            }
        }

        stage('Download Terraform Plan') {
            when {
                triggeredBy 'GenericTrigger'
            }
            steps {
                withCredentials([string(credentialsId: 'GITHUB_TOKEN', variable: 'GITHUB_TOKEN')]) {
                    script {
                        def downloadUrl = sh(returnStdout: true, script: """
                            curl -sL -H "Authorization: token ${GITHUB_TOKEN}" \
                            -H "Accept: application/vnd.github.v3+json" \
                            https://api.github.com/repos/alexhl005/aws-terraform-ansible/actions/artifacts \
                            | jq -r '.artifacts[] | select(.name == "tfplan-${env.GIT_SHA}-${env.ENVIRONMENT}") | .archive_download_url'
                        """).trim()
                        
                        sh """
                            curl -sL -H "Authorization: token ${GITHUB_TOKEN}" \
                            -H "Accept: application/vnd.github.v3+json" \
                            ${downloadUrl} -o tfplan.zip
                            unzip -o tfplan.zip -d terraform/environments/${env.ENVIRONMENT}/
                        """
                    }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                script {
                    def userInput = input(
                        id: 'confirm', 
                        message: "¿Aplicar los cambios de Terraform en ${env.ENVIRONMENT}?", 
                        parameters: [
                            text(name: 'reason', description: 'Razón del despliegue', defaultValue: '')
                        ])
                    
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: env.AWS_CREDENTIALS_ID,
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        dir("terraform/environments/${env.ENVIRONMENT}") {
                        sh 'terraform init -reconfigure'
                        sh 'terraform apply -input=false -auto-approve tfplan'
                        }
                    }
                }
            }
        }

        stage('Generate Terraform Outputs') {
            steps {
                dir("terraform/environments/${env.ENVIRONMENT}") {
                    sh """
                    terraform output -json > ../../tf_outputs/tf_outputs_${env.ENVIRONMENT}.json
                    """
                }
            }
        }

        stage('Configure Ansible Inventory') {
            steps {
                script {
                    def tfOutputs = readJSON file: "tf_outputs/tf_outputs_${env.ENVIRONMENT}.json"
                    
                    writeFile file: "${env.ANSIBLE_DIR}/inventories/${env.ENVIRONMENT}/hosts", 
                             text: """
                    [webservers]
                    ${tfOutputs.ec2_instances.value.join('\n')}

                    [webservers:vars]
                    ansible_user=ubuntu
                    ansible_ssh_private_key_file=../modules/ec2/.ssh/dev-wp-key.pem
                    db_host=${tfOutputs.rds_endpoint.value}
                    elb_dns=${tfOutputs.elb_dns_name.value}
                    """
                }
            }
        }

        stage('Update Configuration Files') {
            steps {
                script {
                    // Leer los outputs de Terraform
                    def tfOutputs = readJSON file: "tf_outputs/tf_outputs_${env.ENVIRONMENT}.json"
                    
                    // Actualizar el archivo PHP con el cluster endpoint
                    def phpConfigFile = "${env.ANSIBLE_DIR}/roles/wordpress/templates/wp-config.php.j2"
                    def phpContent = readFile(file: phpConfigFile)
                    phpContent = phpContent.replace("(cluster_endpoint)", tfOutputs.cluster_endpoint.value)
                    writeFile(file: phpConfigFile, text: phpContent)
                    
                    // Actualizar el script bash con el bucket ARN
                    def bashScriptFile = "../scripts/bash/backup/s3_sync.sh"
                    def bashContent = readFile(file: bashScriptFile)
                    bashContent = bashContent.replace("(bucket_arn)", tfOutputs.bucket_arn.value)
                    writeFile(file: bashScriptFile, text: bashContent)
                    
                    // Confirmar los cambios (opcional)
                    sh """
                        echo "Archivos actualizados:"
                        echo " - ${phpConfigFile}: DB_HOST ahora es ${tfOutputs.cluster_endpoint.value}"
                        echo " - ${bashScriptFile}: S3_BUCKET ahora es ${tfOutputs.bucket_arn.value}"
                    """
                }
            }
        }

        stage('Ansible Deployment') {
            steps {
                dir(env.ANSIBLE_DIR) {
                    withCredentials([file(credentialsId: "AWS_SSH_KEY_${env.ENVIRONMENT}", variable: 'SSH_KEY')]) {
                        sh """
                        mkdir -p /opt/keys
                        cp ${SSH_KEY} /opt/keys/aws-key-${env.ENVIRONMENT}.pem
                        chmod 600 /opt/keys/aws-key-${env.ENVIRONMENT}.pem
                        
                        ansible-playbook -i inventories/${env.ENVIRONMENT}/hosts playbooks/wordpress.yml \
                          -e "@../tf_outputs/tf_outputs_${env.ENVIRONMENT}.json" \
                          -e "env=${env.ENVIRONMENT}"
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: "tf_outputs/tf_outputs_${env.ENVIRONMENT}.json"
            cleanWs()
        }
        failure {
            script {
                slackSend channel: '#infra-alerts',
                         color: 'danger',
                         tokenCredentialId: env.SLACK_TOKEN_CREDENTIAL_ID,
                         message: """Pipeline fallido: ${env.JOB_NAME} #${env.BUILD_NUMBER}
Environment: ${env.ENVIRONMENT}
Commit: ${env.GIT_SHA}
Build URL: ${env.BUILD_URL}"""
            }
        }
        success {
            script {
                slackSend channel: '#infra-alerts',
                         color: 'good',
                         message: """Despliegue exitoso: ${env.JOB_NAME} #${env.BUILD_NUMBER}
Environment: ${env.ENVIRONMENT}
Commit: ${env.GIT_SHA}"""
            }
        }
    }
}