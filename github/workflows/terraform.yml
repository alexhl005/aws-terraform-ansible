name: Terraform CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/environments/dev/**'  # Solo ejecutar cuando cambien archivos Terraform
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to target (dev/prod)'
        required: true
        default: 'dev'
        type: choice
        options: ['dev', 'prod']

env:
  TF_VERSION: "1.6.6"
  AWS_REGION: "us-east-1"

jobs:
  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: ['dev', 'prod']  # Validar todos los entornos
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Actualizado a v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init -backend-config=backend-${{ matrix.env }}.conf -input=false
        working-directory: terraform/environments/${{ matrix.env }}

      - name: Terraform Format
        run: terraform fmt -check -recursive
        working-directory: terraform/environments/${{ matrix.env }}

      - name: Terraform Validate
        run: terraform validate -no-color
        working-directory: terraform/environments/${{ matrix.env }}

  plan:
    name: Terraform Plan
    needs: validate
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}  # Usar entorno seleccionado
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_IAM_ROLE }}
          role-session-name: GitHubActionsTerraformPlan

      - name: Generate Plan
        run: terraform plan -out=tfplan -var-file=vars/${{ github.event.inputs.environment || 'dev' }}.tfvars
        working-directory: terraform/environments/${{ github.event.inputs.environment || 'dev' }}

      - name: Upload Plan Artifact
        uses: actions/upload-artifact@v3
        with:
          name: tfplan-${{ github.sha }}-${{ github.event.inputs.environment || 'dev' }}
          path: terraform/environments/${{ github.event.inputs.environment || 'dev' }}/tfplan
          retention-days: 1  # Limpiar artefactos antiguos

  notify:
    name: Notify Jenkins
    needs: plan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Trigger Jenkins
        uses: machine-learning-apps/trigger-jenkins@master
        with:
          url: "${{ secrets.JENKINS_URL }}/job/terraform-pipeline/build"
          token: "${{ secrets.JENKINS_TRIGGER_TOKEN }}"
          parameters: '{"sha":"${{ github.sha }}", "ref":"${{ github.ref }}", "environment":"${{ github.event.inputs.environment || "dev" }}"}'